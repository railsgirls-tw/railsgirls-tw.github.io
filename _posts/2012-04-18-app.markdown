---
layout: default
title: Rails Girls App 教學
permalink: app
---

# Rails Girls App 教學

*Created by Vesa Vänskä, [@vesan](https://twitter.com/vesan)*
*Translated by JuanitoFatas, [@JuanitoFatas](https://twitter.com/juanitofatas)*

**確定妳已安裝好 Rails**，尚未安裝請參考[**安裝指南**](/install)。


## 認識工具

<div class="indent" markdown="1">

<h3><i class="icon-text-editor">&nbsp;</i></h3>
### 編輯器

[Sublime Text](http://www.sublimetext.com), [Komodo Edit](http://www.activestate.com/komodo-edit), Vim, Emacs, 以及 Gedit 都是妳可以用來寫程式及編輯檔案的編輯器。

<h3><i class="icon-prompt">&nbsp;</i></h3>
### 終端 (Windows 叫命令提示字元)
是妳可以啟動 Rails 伺服器與執行命令的地方。

<h3><i class="icon-browser">&nbsp;</i></h3>
### 網路瀏覽器
(火狐, Safari, Chrome) 用來檢視妳的應用程式。

</div>

### 重要

針對妳的作業系統選對的步驟很重要 —— 在 Windows 執行的命令跟 Mac 與 Linux 上的不太一樣。如果妳遇到任何問題，命令最下方可切換作業系統。

## *1.* 建立應用

我們即將建立一個嶄新的 Rails 應用，叫做 *railsgirls*。

首先，打開終端：

* Mac OS X: 打開 Spotlight，輸入 *Terminal* 並點選 *Terminal* 應用程式.
* Windows: 按開始，找到**命令提示字元**，接著按 *Command Prompt with Ruby on Rails*。
* Linux (Ubuntu): 在 dash 搜索 *Terminal* 並點選 *Terminal*。

接著，輸入下面的命令到終端：

<div class="os-specific">
  <div class="nix">
{% highlight sh %}
mkdir projects
{% endhighlight %}

    <div>
可以用 <code>ls</code> 命令來檢查叫做 <code>projects</code> 的目錄有沒有產生。應該會在輸出裡看到 <code>projects</code> 目錄。現在你想從當下目錄進入 <code>projects</code> 目錄，可以執行：
    </div>

{% highlight sh %}
cd projects
{% endhighlight %}

    <div>
妳可以再次使用 <code>ls</code> 命令來檢查妳現在正在一個空目錄裡。現在妳可以用下面這個命令，來建立一個新的應用，叫做 <code>railsgirls</code>：
    </div>

{% highlight sh %}
rails new railsgirls
{% endhighlight %}

    <div>
這會在 <code>railsgirls</code> 目錄下建立出一個新的應用，所以我們可以再次使用 <code>cd</code> 命令切換到 Rails 應用目錄：
    </div>

{% highlight sh %}
cd railsgirls
{% endhighlight %}

    <div>
如果妳在這個目錄下執行 <code>ls</code> 命令，妳會看到像是 <code>app</code> 以及 <code>config</code> 這樣的目錄。可以用下面這個命令來啟動 Rails 伺服器：
    </div>

{% highlight sh %}
rails server
{% endhighlight %}
  </div>

  <div class="win">
{% highlight sh %}
mkdir projects
{% endhighlight %}

    <div>
可以用 <code>dir</code> 命令來檢查叫做 <code>projects</code> 的目錄有沒有產生。應該會在輸出裡看到 <code>projects</code> 目錄。現在你想從當下目錄進入 <code>projects</code> 目錄，可以執行：
    </div>

{% highlight sh %}
cd projects
{% endhighlight %}

    <div>
妳可以再次使用 <code>ls</code> 命令來檢查妳現在正在一個空目錄裡。現在妳可以用下面這個命令，來建立一個新的應用，叫做 <code>railsgirls</code>：
    </div>

{% highlight sh %}
rails new railsgirls
{% endhighlight %}

    <div>
這會在 <code>railsgirls</code> 目錄下建立出一個新的應用，所以我們可以再次使用 <code>cd</code> 命令切換到 Rails 應用目錄：
    </div>

{% highlight sh %}
cd railsgirls
{% endhighlight %}

    <div>
如果妳在這個目錄下執行 <code>dir</code> 命令，妳會看到像是 <code>app</code> 以及 <code>config</code> 這樣的目錄。可以用下面這個命令來啟動 Rails 伺服器：
    </div>

{% highlight sh %}
ruby bin\rails server
{% endhighlight %}
  </div>
</div>

**Windows 使用者注意：** 可能需要將 `bin\rails` 換成 `script\rails`，這取決於妳安裝的 Rails 版本。

在瀏覽器打開 [http://localhost:3000](http://localhost:3000)。應該會看到 "Welcome aboard" 的頁面，代表妳的新應用產生成功了！

注意！在這個視窗裡看不到命令提示符號，是因為妳在正 Rails 伺服器裡。命令提示符號看起來像是：

<div class="os-specific">
  <div class="nix">
{% highlight sh %}
$
{% endhighlight %}
  </div>
  <div class="win">
{% highlight sh %}
>
{% endhighlight %}
  </div>
</div>

當看不到命令提示符號的時候，妳不能執行新的命令。如果妳試著執行 `cd` 或其它命令都是沒有效的。要回到正常的命令提示符號：

在終端按 `CTRL-C` 來離開伺服器。

**教練：** 解釋每個命令用來在做什麼。產生了什麼檔案？伺服器的功用？


## *2.* 建立 Idea 鷹架

我們即將使用 Rails 內建的鷹架功能來產生一個起點。讓我們可以：列出、新增、移除、編輯、檢視想法。

**教練：** Rails 鷹架是什麼？（解釋鷹架命令、模型名稱以及相關的資料庫表格、命名慣例、屬性以及型別...等等。）什麼是資料庫遷移 (Migrations)？為什麼需要遷移？

<div class="os-specific">
  <div class="nix">
{% highlight sh %}
rails generate scaffold idea name:string description:text picture:string
rake db:migrate
rails server
{% endhighlight %}
  </div>

  <div class="win">
{% highlight sh %}
rails generate scaffold idea name:string description:text picture:string
rake db:migrate
ruby bin\rails server
{% endhighlight %}
  </div>
</div>

到瀏覽器打開 [http://localhost:3000/ideas](http://localhost:3000/ideas)。四處把玩看看，妳僅用幾行命令就產生出來的應用程序。

按 `CTRL-C` 來再次離開伺服器，當妳已經玩了一陣子。


## *3.* 設計

**教練：** 講講 Rails 與 HTML 之間的關係。視圖 (Views)裡面哪個部分是 HTML？哪個部分是嵌入 Ruby (ERB)？MVC 是什麼？與它們有什麼關係？（模型與控制器負責產生 HTML 視圖）

妳的應用現在看起來不太美麗。讓我們來給她打扮打扮。我們會使用 Twitter Bootstrap 專案來非常簡單的幫應用變美麗。

在編輯器裡打開 `app/views/layouts/application.html.erb`，找到這行，在上面

{% highlight erb %}
<%= stylesheet_link_tag "application", media: "all", "data-turbolinks-track" => true %>
{% endhighlight %}

加入

{% highlight erb %}
<link rel="stylesheet" href="http://railsgirls.com/assets/bootstrap.css">
{% endhighlight %}

並將這行換成

{% highlight erb %}
<%= yield %>
{% endhighlight %}

這個

{% highlight erb %}
<div class="container">
  <%= yield %>
</div>
{% endhighlight %}

Let's also add a navigation bar and footer to the layout. In the same file, under `<body>` add

{% highlight html %}
<div class="navbar navbar-fixed-top">
  <div class="navbar-inner">
    <div class="container">
      <a class="brand" href="/">The Idea app</a>
      <ul class="nav">
        <li class="active"><a href="/ideas">Ideas</a></li>
      </ul>
    </div>
  </div>
</div>
{% endhighlight %}

and before `</body>` add

{% highlight html %}
<footer>
  <div class="container">
    Rails Girls 2013
  </div>
</footer>
{% endhighlight %}

Now let's also change the styling of the ideas table. Open `app/assets/stylesheets/application.css` and at the bottom add

{% highlight css %}
body { padding-top: 100px; }
footer { margin-top: 100px; }
table, td, th { vertical-align: middle !important; border: none !important; }
th { border-bottom: 1px solid #DDD !important; }
{% endhighlight %}

Now make sure you saved your files and refresh the browser to see what was changed. You can also change the HTML & CSS further.

**Coach:** Talk a little about CSS and layouts.


## Step 4: Adding picture uploads

We need to install a piece of software to let us upload files in Rails.

Open `Gemfile` in the project directory using your text editor and under the line

{% highlight ruby %}
gem 'sqlite3'
{% endhighlight %}

add

{% highlight ruby %}
gem 'carrierwave'
{% endhighlight %}

**Coach:** Explain what libraries are and why they are useful. Describe what open source software is.

In the terminal run:

{% highlight sh %}
bundle
{% endhighlight %}

Now we can generate the code for handling uploads. In the terminal run:

{% highlight sh %}
rails generate uploader Picture
{% endhighlight %}

At this point you need to **restart the Rails server process** in the terminal.

Hit `CTRL-C` in the terminal to quit the server. Once it has stopped, you can press the up arrow to get to the last command entered, then hit enter to start the server again.

This is needed for the app to load the added library.

Open `app/models/idea.rb` and under the line

{% highlight ruby %}
class Idea < ActiveRecord::Base
{% endhighlight %}

add

{% highlight ruby %}
mount_uploader :picture, PictureUploader
{% endhighlight %}

Open `app/views/ideas/_form.html.erb` and change

{% highlight erb %}
<%= f.text_field :picture %>
{% endhighlight %}

to

{% highlight erb %}
<%= f.file_field :picture %>
{% endhighlight %}

In your browser, add new idea with a picture. When you upload a picture it doesn't look nice because it only shows a path to the file, so let's fix that.

Open `app/views/ideas/show.html.erb` and change

{% highlight erb %}
<%= @idea.picture %>
{% endhighlight %}

to

{% highlight erb %}
<%= image_tag(@idea.picture_url, :width => 600) if @idea.picture.present? %>
{% endhighlight %}

Now refresh your browser to see what changed.

**Coach:** Talk a little about HTML.


## Step 5: Finetune the routes

If you try to open [http://localhost:3000](http://localhost:3000) it still shows the "Welcome aboard" page. Let's make it redirect to the ideas page.

Open `config/routes.rb` and after the first line add

{% highlight ruby %}
root :to => redirect('/ideas')
{% endhighlight %}

Delete the file `index.html` from the `public/` folder.

Test the change by opening the root path (that is, http://localhost:3000/) in your browser.

**Coach:** Talk about routes, and include details on the order of routes and their relation to static files.


## 下一步？

+ 使用 HTML &amp; CSS 加入設計。
+ 加入評分功能
+ 使用 CoffeeScript （或 JavaScript）加入互動。
+ 加入圖片大小轉換使加載圖片更快完成。

## 其它指南

* Guide 0: [Handy cheatsheet for Ruby, Rails, console etc.](https://github.com/PragTob/rails-beginner-cheatsheet)
* Guide 1: [Add commenting by Janika Liiv](/commenting)
* Guide 2: [Put your app online with Heroku by Terence Lee](/heroku)
* Guide 3: [Build a map of workshop participants by Rails Girls Berlin](http://railsgirlsberlin.de/apptutorial/)
* Guide 4: [Create thumbnail images for the uploads by Miha Filej](/thumbnails)
* Guide 5: [Add design using HTML &amp; CSS by Alex Liao](/design)
* Guide 6: [Add Authentication (user accounts) with Devise by Piotr Steininger](/devise/)
* Guide 7: [Go through additional explanations for the App by Lucy Bain](https://github.com/lbain/railsgirls)
